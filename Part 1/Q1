


from vpython import *



# Hard-sphere gas.

# Bruce Sherwood

win = 500

Natoms = 500  # change this to have more or fewer atoms

# Typical values
L = 1 # container is a cube L on a side
gray = color.gray(0.7) # color of edges of container
mass = 4E-3/6E23 # helium mass
Ratom = 0.03 # wildly exaggerated size of helium atom
k = 1.4E-23 # Boltzmann constant
T = 300 # around room temperature
dt = 1E-5

v_avg=(8*k*T/(mass*pi))**(1/2)

def col_avg(R):
        return (pi*Natoms**2*(2*R)**2*v_avg/((L**6)*2**(1/2)))


R0 =  0.001

Radis = []
Col_sec_teo = []
T_avg_teo =[]
Col_sec_sim = []
T_avg_sim =[]
for i in range(1):
    Radis.append(R0+i*R0)

def barx(v):
    return int(v/deltav) # index into bars array
        
def interchange(v1, v2):  # remove from v1 bar, add to v2 bar
    barx1 = barx(v1)
    barx2 = barx(v2)
    if barx1 == barx2:  return
    if barx1 >= len(histo) or barx2 >= len(histo): return
    histo[barx1] -= 1
    histo[barx2] += 1
    
def checkCollisions():
    hitlist = []
    r2 = 2*Ratom
    r2 *= r2
    for i in range(Natoms):
        ai = apos[i]
        for j in range(i) :
            aj = apos[j]
            dr = ai - aj
            if mag2(dr) < r2: hitlist.append([i,j])
    return hitlist

for j in range(len(Radis)):

    N_colisions = 0
    T_total = 0
    Ratom = Radis[j]
    Col_sec_teo.append(col_avg(Ratom))
    T_avg_teo.append(1/col_avg(Ratom))
    animation = canvas( width=1, height=1, align='left')
    animation.range = L
    animation.title = 'A "hard-sphere" gas'
    s = """  Theoretical and averaged speed distributions (meters/sec).
      Initially all atoms have the same speed, but collisions
      change the speeds of the colliding atoms. One of the atoms is
      marked and leaves a trail so you can follow its path.
      
    """
    animation.caption = s
    
    d = L/2+Ratom
    r = 0.005
    boxbottom = curve(color=gray, radius=r)
    boxbottom.append([vector(-d,-d,-d), vector(-d,-d,d), vector(d,-d,d), vector(d,-d,-d), vector(-d,-d,-d)])
    boxtop = curve(color=gray, radius=r)
    boxtop.append([vector(-d,d,-d), vector(-d,d,d), vector(d,d,d), vector(d,d,-d), vector(-d,d,-d)])
    vert1 = curve(color=gray, radius=r)
    vert2 = curve(color=gray, radius=r)
    vert3 = curve(color=gray, radius=r)
    vert4 = curve(color=gray, radius=r)
    vert1.append([vector(-d,-d,-d), vector(-d,d,-d)])
    vert2.append([vector(-d,-d,d), vector(-d,d,d)])
    vert3.append([vector(d,-d,d), vector(d,d,d)])
    vert4.append([vector(d,-d,-d), vector(d,d,-d)])
    
    Atoms = []
    p = []
    apos = []
    pavg = sqrt(2*mass*1.5*k*T) # average kinetic energy p**2/(2mass) = (3/2)kT
        
    
        




    for i in range(Natoms):
        x = L*random()-L/2
        y = L*random()-L/2
        z = L*random()-L/2
        if i == 0:
            Atoms.append(sphere(pos=vector(x,y,z), radius=Ratom, color=color.cyan, make_trail=True, retain=100, trail_radius=0.3*Ratom))
        else: Atoms.append(sphere(pos=vector(x,y,z), radius=Ratom, color=gray))
        apos.append(vec(x,y,z))
        theta = pi*random()
        phi = 2*pi*random()
        px = pavg*sin(theta)*cos(phi)
        py = pavg*sin(theta)*sin(phi)
        pz = pavg*cos(theta)
        p.append(vector(px,py,pz))
    
    deltav = 100 # binning for v histogram
    

    
    nhisto = int(4500/deltav)
    histo = []
    for i in range(nhisto): histo.append(0.0)
    histo[barx(pavg/mass)] = Natoms
    
    gg = graph( width=1, height=0.4, xmax=3000, align='left',
        xtitle='speed, m/s', ytitle='Number of atoms', ymax=Natoms*deltav/1000)
    
    theory = gcurve( color=color.blue, width=2 )
    dv = 10
    for v in range(0,3001+dv,dv):  # theoretical prediction
        theory.plot( v, (deltav/dv)*Natoms*4*pi*((mass/(2*pi*k*T))**1.5) *exp(-0.5*mass*(v**2)/(k*T))*(v**2)*dv )
    
    accum = []
    for i in range(int(3000/deltav)): accum.append([deltav*(i+.5),0])
    vdist = gvbars(color=color.red, delta=deltav )
    

    

    nhisto = 0 # number of histogram snapshots to average
    
    while T_total<0.5:
        rate(300)
        T_total +=dt

        # Accumulate and average histogram snapshots
        for i in range(len(accum)): accum[i][1] = (nhisto*accum[i][1] + histo[i])/(nhisto+1)
        if nhisto % 10 == 0:
            vdist.data = accum
        nhisto += 1
    
        # Update all positions
        for i in range(Natoms): Atoms[i].pos = apos[i] = apos[i] + (p[i]/mass)*dt
        
        # Check for collisions
        hitlist = checkCollisions()
        #if T_total>0.008:
        N_colisions += len(hitlist)
        # If any collisions took place, update momenta of the two atoms
        for ij in hitlist:
            i = ij[0]
            j = ij[1]
            ptot = p[i]+p[j]
            posi = apos[i]
            posj = apos[j]
            vi = p[i]/mass
            vj = p[j]/mass
            vrel = vj-vi
            a = vrel.mag2
            if a == 0: continue;  # exactly same velocities
            rrel = posi-posj
            if rrel.mag > Ratom: continue # one atom went all the way through another
        
            # theta is the angle between vrel and rrel:
            dx = dot(rrel, vrel.hat)       # rrel.mag*cos(theta)
            dy = cross(rrel, vrel.hat).mag # rrel.mag*sin(theta)
            # alpha is the angle of the triangle composed of rrel, path of atom j, and a line
            #   from the center of atom i to the center of atom j where atome j hits atom i:
            alpha = asin(dy/(2*Ratom)) 
            d = (2*Ratom)*cos(alpha)-dx # distance traveled into the atom from first contact
            deltat = d/vrel.mag         # time spent moving from first contact to position inside atom
            
            posi = posi-vi*deltat # back up to contact configuration
            posj = posj-vj*deltat
            mtot = 2*mass
            pcmi = p[i]-ptot*mass/mtot # transform momenta to cm frame
            pcmj = p[j]-ptot*mass/mtot
            rrel = norm(rrel)
            pcmi = pcmi-2*pcmi.dot(rrel)*rrel # bounce in cm frame
            pcmj = pcmj-2*pcmj.dot(rrel)*rrel
            p[i] = pcmi+ptot*mass/mtot # transform momenta back to lab frame
            p[j] = pcmj+ptot*mass/mtot
            apos[i] = posi+(p[i]/mass)*deltat # move forward deltat in time
            apos[j] = posj+(p[j]/mass)*deltat
            interchange(vi.mag, p[i].mag/mass)
            interchange(vj.mag, p[j].mag/mass)
        
        for i in range(Natoms):
            loc = apos[i]
            if abs(loc.x) > L/2:
                if loc.x < 0: p[i].x =  abs(p[i].x)
                else: p[i].x =  -abs(p[i].x)
            
            if abs(loc.y) > L/2:
                if loc.y < 0: p[i].y = abs(p[i].y)
                else: p[i].y =  -abs(p[i].y)
            
            if abs(loc.z) > L/2:
                if loc.z < 0: p[i].z =  abs(p[i].z)
                else: p[i].z =  -abs(p[i].z)
        
    if N_colisions>0:
        Col_sec_sim.append((N_colisions)/(T_total))  
        T_avg_sim.append(((T_total)/(N_colisions)))


#graph1 = graph(title='Colisions per segon en funció del radi', xtitle='Radi', ytitle='Colisions per segon',xmin=0,xmax=0.1, ymin=0, width=600, height=400)

# Create a curve to plot points
#f1 = gcurve(graph=graph1,color=color.red)
#f2 = gcurve(graph=graph1,color=color.blue)

# Plot the points
#for x, y in zip(Radis, Col_sec_sim):
#    rate(5)
#    f1.plot(x, y)
#for x, y in zip(Radis, Col_sec_teo):
#    rate(5)
#    f2.plot(x, y)

graph2 = graph(title='Temps entre colisions en funció del radi', xtitle='Radi', ytitle='Temps entre colisions', xmin=0, ymin=0)

#Create a curve to plot points
f3 = gcurve(graph=graph2,fast=True,color=color.red,label='Temps simulació')
f4 = gcurve(graph=graph2,fast=True,color=color.blue,label='Temps teòric')

#Plot the points
print(T_avg_sim)
print(T_avg_teo)
print(abs(T_avg_teo[1]-T_avg_sim[1])/T_avg_teo[1])

for x, y in zip(Radis, T_avg_sim):
    f3.plot(x, y)
for x, y in zip(Radis, T_avg_teo):
    f4.plot(x, y)

error = []

for i in range(len(Radis)):
    error.append(100*abs(T_avg_sim[i]-T_avg_teo[i])/T_avg_teo[i])
graph3 = graph(xtitle='Radi', ytitle='Error relatiu (%)', xmin=0, ymin=0)
f5 = gcurve(graph=graph3,fast=True,color=color.blue)

#Plot the points
for x, y in zip(Radis, error):
    f5.plot(x, y)
